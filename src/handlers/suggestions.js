/* eslint-disable consistent-return */
'use strict';

const { MessageEmbed } = require('discord.js');
const Suggestion = require('../models/Suggestion');
const suggestionsConfig = require('../utils/config').suggestions;

exports.handleMessage = async message => {
  const settings = suggestionsConfig[message.guild.id];
  // eslint-disable-next-line no-useless-return
  if (!settings || message.channel.id !== settings.channelID) return;

  const suggestionDoc = await Suggestion.create({
    guildID: message.guild.id,
    channelID: message.channel.id,
    authorID: message.author.id,
  });

  const embed = new MessageEmbed()
    .setColor(0x4f67ff)
    .setAuthor(message.member.displayName, message.author.displayAvatarURL({ dynamic: true }))
    .setTitle(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #${suggestionDoc._id}`)
    .setDescription(message.content);

  message.delete();
  message.channel.send(embed).then(msg => {
    msg.react('‚¨ÜÔ∏è');
    msg.react('‚¨áÔ∏è');

    suggestionDoc.messageID = msg.id;
    suggestionDoc.save();
  });
};

const config = {
  approve: { color: 0xa1ffbf, title: '–û–¥–æ–±—Ä–µ–Ω–æ', description: '–æ–¥–æ–±—Ä–µ–Ω–æ' },
  consider: { color: 0xfff04f, title: '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', description: '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"' },
  deny: { color: 0xffa1bd, title: '–û—Ç–∫–∞–∑–∞–Ω–æ', description: '–æ—Ç–∫–∞–∑–∞–Ω–æ' },
  implement: { color: 0x4fffe5, title: '–í–≤–µ–¥–µ–Ω–æ', description: '–≤–≤–µ–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä' },
};

exports.action = async (message, action) => {
  const settings = suggestionsConfig[message.guild.id];
  if (!settings) return;

  if (
    !message.member.hasPermission('ADMINISTRATOR') &&
    !message.member.roles.cache.some(r => settings.moderators.includes(r.id))
  ) {
    return message.channel.send(
      message.member,
      new MessageEmbed().setColor('RED').setTitle('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã'),
    );
  }

  const args = message.content.slice(1).trim().split(/ +/g);

  const suggestionID = +args[1];
  if (isNaN(suggestionID)) {
    return message.channel.send(
      message.member,
      new MessageEmbed().setColor('RED').setTitle(`–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - \`/${args[0]} <id> [–ø—Ä–∏—á–∏–Ω–∞]\``),
    );
  }

  const reason = args.slice(2).join(' ');
  if (reason && reason.length > 1024) {
    return message.channel.send(
      message.member,
      new MessageEmbed().setColor('RED').setTitle('–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤'),
    );
  }

  const suggestion = await Suggestion.findById(suggestionID);
  if (!suggestion) {
    return message.channel.send(
      message.member,
      new MessageEmbed().setColor('RED').setTitle(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID ${suggestionID} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`),
    );
  }

  const suggestionsChannel = message.guild.channels.cache.get(suggestion.channelID);
  if (!suggestionsChannel) {
    return message.channel.send(
      message.member,
      new MessageEmbed().setColor('RED').setTitle(`–ö–∞–Ω–∞–ª, –∫—É–¥–∞ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω`),
    );
  }

  const suggestionMsg = await suggestionsChannel.messages.fetch(suggestion.messageID);
  if (!suggestionMsg) {
    return message.channel.send(
      message.member,
      new MessageEmbed().setColor('RED').setTitle(`–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º`),
    );
  }

  const embed = suggestionMsg.embeds[0]
    .setColor(config[action].color)
    .setTitle(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #${suggestionID} | ${config[action].title}`);
  embed.fields[0] = { name: `–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç ${message.author.tag}`, value: reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞', inline: false };

  suggestionMsg.edit(embed);
  message.channel.send(embed).then(msg => {
    msg.delete({ timeout: 5000 });
    message.react('üëç');
  });

  const approvedChannel = message.guild.channels.cache.get(settings.approvedChannelID);
  if (approvedChannel && ['approve', 'implement', 'consider'].includes(action)) {
    approvedChannel.send(embed);
  }

  const suggestionAuthor = message.client.users.cache.get(suggestion.authorID);
  if (suggestionAuthor) {
    suggestionAuthor.send(
      `–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ **#${suggestionID}** –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **${message.guild.name}**` +
        `–±—ã–ª–æ ${config[action].description} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º **${message.author.tag}**`,
      embed,
    );
  }
};
