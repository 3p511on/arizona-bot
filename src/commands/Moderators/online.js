'use strict';

const { fractionNames } = require('@nieopierzony/core').helpers;
const { MessageEmbed } = require('discord.js');
const plural = require('plural-ru');

const { getOnline } = require('../../handlers/online');
const Command = require('../../structures/Command');
const allSettings = require('../../utils/config').onlineSettings;

const numbers = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
const PEOPLE = key => plural(key, `%d —á–µ–ª–æ–≤–µ–∫`, `%d —á–µ–ª–æ–≤–µ–∫–∞`, `%d —á–µ–ª–æ–≤–µ–∫`);
const colors = {
  // –ü–æ–ª–∏—Ü–∏—è –õ–°
  1: 0x7383e6,
  // –ü–æ–ª–∏—Ü–∏—è –†–ö
  2: 0x7383e6,
  // –§–ë–†
  3: 0x7383e6,
  // –ü–æ–ª–∏—Ü–∏—è –°–§
  4: 0x7383e6,
  // –ë–æ–ª—å–Ω–∏—Ü–∞ –õ–°
  5: 0xff6db2,
  // –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ
  6: 0xff6db2,
  // –¢—é—Ä—å–º–∞ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞
  7: 0xc0a987,
  // –ë–æ–ª—å–Ω–∏—Ü–∞ –°–§
  8: 0xff6db2,
  // –ê–≤—Ç–æ—à–∫–æ–ª–∞
  9: 0xffb074,
  // –†–∞–¥–∏–æ –õ–°
  10: 0xfe9746,
  // Grove Street
  11: 0x4f9452,
  // Vagos
  12: 0xd6cc70,
  // Ballas
  13: 0xbe4ed1,
  // Aztecas
  14: 0x79e2c8,
  // Rifa
  15: 0x5577be,
  // –†—É—Å—Å–∫–∞—è –º–∞—Ñ–∏—è
  16: 0x4fa59e,
  // –Ø–∫—É–¥–∑–∞
  17: 0xbb2e40,
  // La Cosa Nostra
  18: 0xad4ea7,
  // Warlock MC
  19: 0xc76c3d,
  // –ê—Ä–º–∏—è –õ–°
  20: 0xb8865f,
  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫
  21: 0x70ccbd,
  // –ë–æ–ª—å–Ω–∏—Ü–∞ –õ–í
  22: 0xff6db2,
  // –ü–æ–ª–∏—Ü–∏—è –õ–í
  23: 0x7383e6,
  // –†–∞–¥–∏–æ –õ–í
  24: 0xfe9746,
  // –ù–æ—á–Ω—ã–µ –≤–æ–ª–∫–∏
  25: 0xbc8f8f,
  // –†–∞–¥–∏–æ –°–§
  26: 0xfe9746,
  // –ê—Ä–º–∏—è –°–§
  27: 0xb8865f,
  // –°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è
  29: 0x67a1d3,
};
const titles = {
  1: 'üëÆ‚îÉ –ü–æ–ª–∏—Ü–∏—è –õ–°',
  2: 'üëÆ‚îÉ –ü–æ–ª–∏—Ü–∏—è –†–ö',
  3: 'üëÆ‚îÉ –§–ë–†',
  4: 'üëÆ‚îÉ –ü–æ–ª–∏—Ü–∏—è –°–§',
  5: 'üè•‚îÉ –ë–æ–ª—å–Ω–∏—Ü–∞ –õ–°',
  6: 'üíº‚îÉ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
  7: 'üíÇ‚îÉ –¢—é—Ä—å–º–∞ —Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞',
  8: 'üè•‚îÉ –ë–æ–ª—å–Ω–∏—Ü–∞ –°–§',
  9: 'üö¶‚îÉ –ê–≤—Ç–æ—à–∫–æ–ª–∞',
  10: 'üì∑‚îÉ –†–∞–¥–∏–æ –õ–°',
  11: 'üî´‚îÉ Grove Street',
  12: 'üî´‚îÉ Vagos',
  13: 'üî´‚îÉ Ballas',
  14: 'üî´‚îÉ Aztecas',
  15: 'üî´‚îÉ Rifa',
  16: 'üé±‚îÉ –†—É—Å—Å–∫–∞—è –º–∞—Ñ–∏—è',
  17: '„äô‚îÉ –Ø–∫—É–∑–¥–∞',
  18: 'üé©‚îÉ La Cosa Nostra',
  19: 'üé≤‚îÉ Warlock MC',
  20: '‚≠ê‚îÉ –ê—Ä–º–∏—è –õ–°',
  21: 'üí∞‚îÉ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫',
  22: 'üè•‚îÉ –ë–æ–ª—å–Ω–∏—Ü–∞ –õ–í',
  23: 'üëÆ‚îÉ –ü–æ–ª–∏—Ü–∏—è –õ–í',
  24: 'üì∑‚îÉ –†–∞–¥–∏–æ –õ–í',
  25: 'üî´‚îÉ –ù–æ—á–Ω—ã–µ –≤–æ–ª–∫–∏',
  26: 'üì∑‚îÉ –†–∞–¥–∏–æ –°–§',
  27: '‚≠ê‚îÉ –ê—Ä–º–∏—è –°–§',
  29: 'üí∞‚îÉ –°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
};

module.exports = class extends Command {
  constructor(...args) {
    super(...args, {
      name: 'online',
      devOnly: true,
      userPermissions: ['ADMINISTRATOR'],
    });
  }
  async run({ args, message }) {
    // Check settings for guild
    const settings = allSettings[message.guild.id];
    if (!settings) {
      return this.sendError(message, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    // Check if member is moderator
    const isModer =
      message.member.hasPermission('ADMINISTRATOR') ||
      message.member.roles.cache.some(r => settings.moderators.includes(r.id));

    // If user's moder and there's no specified fraction ID
    if (isModer && !args[0]) {
      return this.sendError(message, '–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å ID —Ñ—Ä–∞–∫—Ü–∏–∏: `/online <id>`');
    }

    // Get fraction ID to find by member's roles
    const fractionIDs = isModer
      ? [args[0]]
      : Object.entries(settings.fractionsByRoles).filter(r =>
          message.member.roles.cache.some(i => r[1].includes(i.id)),
        );

    // If user has not any fraction to show online
    if (!isModer && !fractionIDs.length) {
      return this.sendError(message, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ–Ω–ª–∞–π–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–π');
    }

    if (!isModer && fractionIDs.length > 1) {
      return this.awaitFractions(message, fractionIDs);
    }

    return this.showOnline(
      message,
      message.member,
      fractionIDs.map(f => +f[0]),
    );
  }

  async showOnline(message, mentionMember, fractionIDs, edit = false) {
    const settings = allSettings[message.guild.id];

    if (!settings) return;

    const embeds = [];
    for await (const fractionID of fractionIDs) {
      const players = await getOnline(message.client, {
        fractionID: fractionID,
        serverID: settings.gameServerID,
      });

      // TODO: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–º–æ–≤
      const seniors = players.filter(p => p.rank >= 9);
      const membersOnline = players.filter(p => p.online).length;

      embeds.push(
        new MessageEmbed()
          .setTitle(`**${titles[fractionID]}**`)
          .setColor(colors[fractionID])
          .setDescription(
            `**\`\`\`–í—Å–µ–≥–æ –ª—é–¥–µ–π –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏: ${PEOPLE(players.length)}\n–û–Ω–ª–∞–π–Ω –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: ${PEOPLE(
              membersOnline,
            )}\n–ò–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ${PEOPLE(
              seniors.filter(i => i.online).length,
            )}\`\`\`\n–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:\`\`\`diff\n${seniors
              .sort((a, b) => b.rank - a.rank)
              .map(
                m =>
                  `${m.online ? '+' : '-'} ${m.nickname} - ${m.rank === 10 ? '–õ–∏–¥–µ—Ä' : '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å'} - ${
                    m.online ? '–í –∏–≥—Ä–µ' : '–û—Ñ—Ñ–ª–∞–π–Ω'
                  }`,
              )
              .join('\n')}\`\`\`**`,
          ),
      );
    }

    message.channel.send(mentionMember, ...embeds);
  }

  async awaitFractions(message, fractionIDs) {
    const fractions = this._fractionsToArray(fractionIDs);
    const msg = await message.channel.send(message.member, this._createChooseMenu(this._formatFractionIDs(fractions)));
    console.log(this._formatFractionIDs(fractions));
    for (const [i] of fractions.slice(0, 11).entries()) {
      msg.react(numbers[i]);
    }
    msg.react('üÜó');

    const filter = reaction => reaction.emoji.name === 'üÜó' || numbers.includes(reaction.emoji.name);
    const collector = msg.createReactionCollector(filter, { time: 60000 });

    collector.on('collect', (reaction, user) => {
      if (user.bot) return;
      if (user.id !== message.author.id) {
        // eslint-disable-next-line consistent-return
        return reaction.users.remove(user);
      }

      if (numbers.includes(reaction.emoji.name)) {
        reaction.users.remove(user);

        const elementIndex = numbers.indexOf(reaction.emoji.name);
        if (elementIndex === 0) {
          if (fractions[0].isSelected) {
            fractions.forEach(r => (r.isSelected = false));
          } else {
            fractions.forEach(r => (r.isSelected = true));
          }
        } else {
          fractions[elementIndex].isSelected = !fractions[elementIndex].isSelected;

          if (fractions.slice(1, 10).every(r => r.isSelected)) {
            fractions[0].isSelected = true;
          } else {
            fractions[0].isSelected = false;
          }
        }

        msg.edit(message.member, this._createChooseMenu(this._formatFractionIDs(fractions)));
      } else if (reaction.emoji.name === 'üÜó') {
        if (!fractions.find(r => r.isSelected)) {
          msg.edit(
            this._createChooseMenu(
              this._formatFractionIDs(fractions),
              '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            ),
          );
          // eslint-disable-next-line consistent-return
          return reaction.users.remove(user);
        }
        msg.reactions.removeAll();
        msg.edit(message.member, new MessageEmbed().setColor(0x2f3136).setTitle('**–ó–∞–≥—Ä—É–∑–∫–∞...**'));
        this.showOnline(
          msg,
          message.member,
          fractions.filter(f => f.isSelected && f.id !== 0).map(f => +f.id),
          true,
        );
      } else {
        reaction.users.remove(user);
      }
    });
  }

  _fractionsToArray(fractionIDs) {
    const arr = [{ id: 0, isSelected: false }];
    fractionIDs.forEach(f => {
      arr.push({ id: f[0], isSelected: false });
    });
    return arr;
  }

  _formatFractionIDs(fractions) {
    return `\`\`\`diff\n${fractions
      .map(
        (j, i) => `${j.isSelected ? '+ ' : ''}[${i}] ${j.id === 0 ? '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏\n' : fractionNames[j.id - 1]}`,
      )
      .join('\n')}\`\`\``;
  }

  _createChooseMenu(content, error) {
    return new MessageEmbed()
      .setColor(0x03c2fc)
      .setTitle('**üîé ‚îÉ –í—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞**')
      .setFooter('–ù–∞ –≤—ã–±–æ—Ä —É –≤–∞—Å –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞')
      .setTimestamp()
      .setDescription(`**${content}${error ? `\n\`\`\`diff\n- ${error}\`\`\`` : ''}**`);
  }

  sendError(message, content) {
    message.react('‚ùå');
    message.channel
      .send(message.member, new MessageEmbed().setColor(0xff4a4a).setTitle(content))
      .then(msg => msg.delete({ timeout: 15000 }));
  }
};
